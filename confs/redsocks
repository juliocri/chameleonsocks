#
# Copyright: 2011-2013 Apollon Oikonomopoulos <apoikos@gmail.com>
#
# License:
# Copying and distribution of this package, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
#

#!/bin/sh

### BEGIN INIT INFO
# Provides:          redsocks
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: redsocks TCP connection-to-SOCKS redirector
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

# Author: Apollon Oikonomopoulos <apoikos@gmail.com>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=redsocks             # Introduce a short description here
NAME=redsocks             # Introduce the short server's name here
DAEMON=/usr/sbin/redsocks # Introduce the server's location here
DAEMON_ARGS=""             # Arguments to run the daemon with
PIDFILE=/run/$NAME/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
IPTABLES=1

# Use iptables or nftables
iptables -L &> /dev/null || IPTABLES=

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{

######################## {IP,NF}TABLE RULES ############################

if [ ! -z $IPTABLES ]; then # iptables

##            Create CHAMELEONSOCKS chain                             ##

	iptables -t nat -N CHAMELEONSOCKS

##     Redirect all outgoing host traffic to CHAMELEONSOCKS           ##

	iptables -t nat -A OUTPUT -p tcp -j CHAMELEONSOCKS

##     Redirect all outgoing container traffic to CHAMELEONSOCKS      ##

	iptables -t nat -A PREROUTING -i docker0 -p tcp -j CHAMELEONSOCKS

##    Add proxy exceptions from config file    ##

	awk -F, '{print $1}' /etc/chameleonsocks.exceptions | awk 'NF' |  \
	xargs -I {} iptables -t nat -A CHAMELEONSOCKS -j RETURN -d {}

##    Add proxy exceptions from PAC file    ##

if [ ! -z "$PAC_URL" ]; then
	curl $PAC_URL | python /etc/pac.py |  \
	xargs -I {} iptables -t nat -A CHAMELEONSOCKS -j RETURN -d {}
fi;

##     Redirect all unhandles addresses to the proxy             ##

	iptables -t nat -A CHAMELEONSOCKS -p tcp -j REDIRECT --to-ports 1080

else # nftables

##    Create rules backup for restore
	nft list ruleset > nft-backup-rules

##            Create CHAMELEONSOCKS chain                             ##

	nft add chain ip nat CHAMELEONSOCKS

##     Redirect all outgoing host traffic to CHAMELEONSOCKS           ##

	nft add rule ip nat OUTPUT ip protocol tcp jump CHAMELEONSOCKS

##     Redirect all outgoing container traffic to CHAMELEONSOCKS      ##

	nft add rule ip nat PREROUTING ip protocol tcp meta iifname "docker0" jump CHAMELEONSOCKS

##    Add proxy exceptions from config file    ##

	awk -F, '{print $1}' /etc/chameleonsocks.exceptions | awk 'NF' |  \
	xargs -I {} nft add rule ip nat CHAMELEONSOCKS ip daddr {} return

##    Add proxy exceptions from PAC file    ##

if [ ! -z "$PAC_URL" ]; then
	curl $PAC_URL | python /etc/pac.py |  \
	xargs -I {} nft add rule ip nat CHAMELEONSOCKS ip daddr {} return
fi;

##     Redirect all unhandles addresses to the proxy             ##

	nft add rule ip nat CHAMELEONSOCKS ip protocol tcp redirect to 1080

fi

####################### {IP/NF}TABLE RULES END ########################


	# Take care of pidfile permissions
	USER=$(egrep '\buser\s*=' $CONFFILE | sed -r 's/.*\buser\s+=\s*(.*);/\1/')
	mkdir /run/$NAME 2>/dev/null || true
	chown "$USER" /run/$NAME
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		-c "$CONFFILE" -p $PIDFILE \
		|| return 2
	#Docker hack
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{

################### CLEAR IPTABLE RULES ##########################################

if [ ! -z $IPTABLES ]; then # iptables

	iptables -t nat -F CHAMELEONSOCKS
	iptables -t nat -D CHAMELEONSOCKS -p tcp -j REDIRECT --to-ports 1080
	iptables -t nat -D OUTPUT -p tcp -j CHAMELEONSOCKS
	iptables -t nat -D PREROUTING -i docker0 -p tcp -j CHAMELEONSOCKS
	iptables -t nat -X CHAMELEONSOCKS

else # nftables

##    flush nft rules

	nft flush ruleset

##    Restore backup nft rules

	nft -f nft-backup-rules

fi

################### CLEAR IPTABLE RULES END ######################################

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}


case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  # Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
